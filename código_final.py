# -*- coding: utf-8 -*-
"""Cópia de projeto_IA (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y1ZW2GWUeGowwc1UxwiJlyoTbZoo4J9e
"""

#!pip install datatorch

!python -m pip install pyyaml==5.1
import sys, os, distutils.core
# Foi utilizado um método mais rápido para instalação do detectron2 mas não contém todas as suas funcionalidades.
!git clone 'https://github.com/facebookresearch/detectron2'
# O comando Git clone irá fazer o download de um repositório do github chamado "Detectron2" que contém o código fonte.
dist = distutils.core.run_setup("./detectron2/setup.py")
!python -m pip install {' '.join([f"'{x}'" for x in dist.install_requires])}
sys.path.insert(0, os.path.abspath('./detectron2'))

import torch, detectron2
#Exibe versões da placa de vídeo,CUDA,torch e detectron2.
!nvcc --version
TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:", detectron2.__version__)

# Importação de bibliotecas básicas e do detectron2
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()
import matplotlib.pyplot as plt
import numpy as np
import cv2
from google.colab.patches import cv2_imshow

from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

#O comando wget vai fazer o download de um arquivo compactado e o unzip vai descompactar.
!wget https://github.com/cassiomatos92/data/archive/refs/heads/data.zip
!unzip data.zip > /dev/null

# Será atribuído um nome para o nosso conjunto de dados. Abaixo também pode se encontrar os caminhos para a pasta onde o arquivo .json está e as fotos usadas para criação do dataset.
from detectron2.data.datasets import register_coco_instances
register_coco_instances("fruits_nuts", {}, "./data-data/trainval.json", "./data-data/images")

# Acessando os metadados do conjunto de dados que registramos a cima
fruits_nuts_metadata = MetadataCatalog.get("fruits_nuts")
dataset_dicts = DatasetCatalog.get("fruits_nuts")

# O random vai escolher 2 fotos aleatórias e apresentar ela com os nomes que foram definidos no dataset
import random

for d in random.sample(dataset_dicts, 2):
  img = cv2.imread(d["file_name"])
  visualizer = Visualizer(img[:, :, ::-1], metadata=fruits_nuts_metadata, scale=0.5)
  vis = visualizer.draw_dataset_dict(d)
  cv2_imshow(vis.get_image()[:, :, ::-1])

#Nessa célula será realizado o treinamento do modelo de detecção dos rostos
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os

cfg = get_cfg()
cfg.merge_from_file("./detectron2/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg.DATASETS.TRAIN = ("fruits_nuts",)
cfg.DATASETS.TEST = ()
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"  # initialize from model zoo
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.02
cfg.SOLVER.MAX_ITER = 700
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 11

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg)
trainer.resume_or_load(resume=False)
trainer.train()

# Inferência com o modelo treinado
cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
cfg.DATASETS.TEST = ("fruits_nuts", )
predictor = DefaultPredictor(cfg)

# Selecionando uma amostra aleatória para visualizar o resultado da previsão.
from detectron2.utils.visualizer import ColorMode

for d in random.sample(dataset_dicts, 1):
    im = cv2.imread(d["file_name"])
    outputs = predictor(im)
    v = Visualizer(im[:, :, ::-1],
                   metadata=fruits_nuts_metadata,
                   scale=0.8,
                   instance_mode=ColorMode.IMAGE_BW
    )
    v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2_imshow(v.get_image()[:, :, ::-1])

# Realização de testes com 2 imagens que não foram adicionadas no dataset.
from detectron2.utils.visualizer import ColorMode
import glob

for imageName in glob.glob('data-data/test/*'):
  im = cv2.imread(imageName)
  outputs = predictor(im)
  v = Visualizer(im[:, :, ::-1],
                metadata=fruits_nuts_metadata,
                scale=0.8
                 )
  out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
  cv2_imshow(out.get_image()[:, :, ::-1])

# Traçando métricas obtidas do experimento.
import matplotlib.pyplot as plt
import json

experiment_folder = './output/'

def load_json_arr(json_path):
    lines = []
    with open(json_path, 'r') as f:
        for line in f:
            lines.append(json.loads(line))
    return lines

experiment_metrics = load_json_arr(experiment_folder + '/metrics.json')

plt.figure(figsize=(10, 6))

# Plot total loss
plt.plot(
   [x['iteration'] for x in experiment_metrics],
   [x['total_loss'] for x in experiment_metrics],
   label='total_loss', linestyle='-')

# Plot validation loss
plt.plot(
   [x['iteration'] for x in experiment_metrics if 'validation_loss' in x],
   [x['validation_loss'] for x in experiment_metrics if 'validation_loss' in x],
   label='validation_loss')

# Plot class accuracy
plt.plot(
   [x['iteration'] for x in experiment_metrics if 'fast_rcnn/cls_accuracy' in x],
   [x['fast_rcnn/cls_accuracy'] for x in experiment_metrics if 'fast_rcnn/cls_accuracy' in x],
   label='fast_rcnn/cls_accuracy')

# Plot mask accuracy
plt.plot(
   [x['iteration'] for x in experiment_metrics if 'mask_rcnn/accuracy' in x],
   [x['mask_rcnn/accuracy'] for x in experiment_metrics if 'mask_rcnn/accuracy' in x],
   label='mask_rcnn/accuracy')

plt.xlabel('Iteration')
plt.ylabel('Metric Value')
plt.title('Model with 8 Num Workers | 700 Max Iter | 1024 Batch Size per Image')

plt.legend()
plt.style.use('seaborn-v0_8-ticks')
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('model.pdf')
plt.show()
